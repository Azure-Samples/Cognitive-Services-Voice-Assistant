# ASP.NET
# Build and test ASP.NET projects.
# Add steps that publish symbols, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/aspnet/build-aspnet-4

# "Customize your pipeline" on MS docs:
# https://docs.microsoft.com/en-us/azure/devops/pipelines/customize-pipeline

# Specific branch build with batching
trigger:
  batch: true
  branches:
    include:
    - master

pool:
  vmImage: 'windows-latest'

variables:

  # Common Build configurations
  buildPlatformNative: x64
  buildPlatformManaged: 'Any CPU'
  buildConfiguration: Release
  dotNetCoreVersion: '3.1'

  # Sample 1: Windows Voice Assistant Client, C# WPF (\samples\clients\csharp-wpf)
  sample1Folder: 'samples\clients\csharp-wpf'
  sample1Solution: '$(sample1Folder)\VoiceAssistantClient.sln'
  sample1PublishedArtifactPath: '$(sample1Folder)\VoiceAssistantClient\bin\$(buildPlatformNative)\$(buildConfiguration)'
  sample1PublishedArtifactName: 'WindowsVoiceAssistantClientBuild'

  # Sample 2: Voice Assistant Test, .NET core (\samples\clients\csharp-dotnet-core\voice-assistant-test)
  sample2Folder: 'samples\clients\csharp-dotnet-core\voice-assistant-test\tool'
  sample2Solution: '$(sample2Folder)\VoiceAssistantTest.sln'
  sample2PublishedArtifactPath: '$(sample2Folder)\bin\$(buildConfiguration)\netcoreapp$(dotNetCoreVersion)'
  sample2PublishedArtifactName: 'VoiceAssistantTestBuild'

steps:

- task: NuGetToolInstaller@0

- task: NuGetCommand@2
  inputs:
    restoreSolution: '$(sample1Solution)'

# Build .Net Standard applications
- task: VSBuild@1
  inputs:
    solution: '$(sample1Solution)'
    msbuildArgs: '/p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true /p:PackageLocation="$(build.artifactStagingDirectory)"'
    platform: '$(buildPlatformNative)'
    configuration: '$(buildConfiguration)'

- task: PublishPipelineArtifact@1
  inputs:
    path: $(sample1PublishedArtifactPath)
    artifact: $(sample1PublishedArtifactName)

# Build .Net Core applications
- task: DotNetCoreCLI@2
  inputs:
    Command: 'build'
    Projects: $(sample2Solution)
    Arguments: '-c $(buildConfiguration)'

- task: PublishPipelineArtifact@1
  inputs:
    path: $(sample2PublishedArtifactPath)
    artifact: $(sample2PublishedArtifactName)

#- task: VSTest@2
#  inputs:
#    platform: '$(buildPlatformNative)'
#    configuration: '$(buildConfiguration)'

- task: ComponentGovernanceComponentDetection@0
  inputs:
    scanType: 'Register'
    verbosity: 'Verbose'
    alertWarningLevel: 'High'

- task: PoliCheck@1
  inputs:
    inputType: 'Basic'
    targetType: 'F'
    targetArgument: '$(Build.SourcesDirectory)'
    result: 'PoliCheck.xml'

- task: notice@0
  inputs:
    outputformat: 'text'


